#!/bin/bash

set -e

: ${BLOB_DIR:?required}
: ${BLOB_NAME:?required}
: ${BLOB_BINARY:?required}
: ${BLOB_CLEANUP:?required}
: ${BLOB_DESTINATION:?required}

VERSION=$(cat ${BLOB_DIR}/version)

pushd ${REPO_ROOT:?required}

cat <<EOF >config/private.yml
---
blobstore:
  provider: s3
  options:
    access_key_id: ${AWS_ACCESS_KEY:?required}
    secret_access_key: ${AWS_SECRET_KEY:?required}
EOF

blobs_to_remove=$(spruce json config/blobs.yml | jq -r "keys[] | select(test(\"${BLOB_CLEANUP}\"))")
if [[ ! -z $blobs_to_remove ]]; then
  echo "$blobs_to_remove" | xargs -L1 bosh remove-blob
fi

if [[ ${BLOB_SOURCE:-} =~ ^http ]]; then
  echo "fetching blob from upstream $(printf ${BLOB_SOURCE} ${VERSION}) ..."
  if [[ ${BLOB_SOURCE} =~ .tgz$ ]]; then
    curl -Lsk $(printf ${BLOB_SOURCE} ${VERSION}) | tar -xzO ${BLOB_BINARY} > ../${BLOB_DIR}/${BLOB_BINARY}
  else
    curl -Lsk $(printf ${BLOB_SOURCE} ${VERSION}) > ../${BLOB_DIR}/${BLOB_BINARY}
  fi
fi

# remove things that github-release puts in the directory that we don't want.
rm -f ../${RELEASE_DIR}/tag ../${RELEASE_DIR}/body ../${RELEASE_DIR}/version

# expand ${VERSION} env var into file path
eval "blob_destination=${BLOB_DESTINATION}"
if [[ "$BLOB_BINARY" == "*" ]]; then
  for blob_src in ../${BLOB_DIR}/${BLOB_BINARY}; do
    base=${blob_src##*/}
    bosh add-blob "${blob_src}" "${blob_destination}/${base}"
  done
else
  bosh add-blob "../${BLOB_DIR}/${BLOB_BINARY}" "${blob_destination}"
fi
bosh -n upload-blobs
rm config/private.yml
popd

if [[ -n "$(cd ${REPO_ROOT}; git status --porcelain)" ]]; then
  pushd ${REPO_ROOT}
  cat <<EOF >>ci/release_notes.md

# ${BLOB_NAME}
Bumped ${BLOB_NAME} to v${VERSION}
EOF
  popd

  # GIT!
  if [[ -z $(git config --global user.email) ]]; then
    git config --global user.email "ci@starkandwayne.com"
  fi
  if [[ -z $(git config --global user.name) ]]; then
    git config --global user.name "CI Bot"
  fi

  (cd ${REPO_ROOT}
   git merge --no-edit ${BRANCH}
   git add -A
   git status
   git commit -m "Bumped ${BLOB_NAME} to v${VERSION}")
fi

# so that future steps in the pipeline can push our changes
cp -a ${REPO_ROOT} ${REPO_OUT}
